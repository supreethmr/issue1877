'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDocgen = require('react-docgen');

var _terraMarkdown = require('terra-markdown');

var _terraMarkdown2 = _interopRequireDefault(_terraMarkdown);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _PropsTableModule = require('./PropsTable.module.scss');

var _PropsTableModule2 = _interopRequireDefault(_PropsTableModule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /* eslint-disable import/no-extraneous-dependencies */


var cx = _bind2.default.bind(_PropsTableModule2.default);

var propTypes = {
  /**
   * Title of component
   */
  componentName: _propTypes2.default.string,
  /**
   * Markdown source file
   */
  src: _propTypes2.default.string.isRequired,
  /**
   * Type of react-docgen resolver to use for prop-types resolution. Supported values are `default` or `findAllComponentDefinitions`
   */
  propsResolution: _propTypes2.default.oneOf(['default', 'findAllComponentDefinitions'])
};

var defaultProps = {
  propsResolution: 'default'
};

function formatShape(shape) {
  return JSON.stringify(shape, null, 1);
}

function determineType(type) {
  var typeName = type.name;

  if (typeName === 'enum') {
    typeName = 'enum';
  } else if (typeName === 'arrayOf') {
    if (type.value.name === 'shape') {
      typeName = _react2.default.createElement(
        'span',
        null,
        ' ',
        'array of objects structured like:',
        _react2.default.createElement(
          'pre',
          { className: cx('props-table-pre') },
          ' ',
          formatShape(type.value.value),
          ' '
        )
      );
    } else {
      typeName = 'array of ' + type.value.name + 's';
    }
  } else if (typeName === 'union') {
    var options = type.value.map(function (option) {
      var name = option.name === 'shape' ? _react2.default.createElement(
        'span',
        { key: option.value },
        ' ',
        'an object structured like:',
        _react2.default.createElement(
          'pre',
          { className: cx('props-table-pre') },
          ' ',
          formatShape(option.value),
          ' '
        )
      ) : _react2.default.createElement(
        'span',
        { key: option.name },
        ' ',
        option.name
      );
      return name;
    });
    typeName = options.reduce(function (curr, next) {
      return [curr, _react2.default.createElement(
        'span',
        { key: curr.value + '-' + next.value },
        ' or '
      ), next];
    });
  } else if (typeName === 'shape') {
    typeName = _react2.default.createElement(
      'span',
      null,
      ' ',
      'an object structured like:',
      _react2.default.createElement(
        'pre',
        { className: cx('props-table-pre') },
        ' ',
        formatShape(type.value),
        ' '
      )
    );
  }

  return typeName;
}

/**
 * Renders a table view for the props metadata of a react component generated by react-docgen
 */
var PropsTable = function PropsTable(_ref) {
  var componentName = _ref.componentName,
      propsResolution = _ref.propsResolution,
      src = _ref.src,
      customProps = _objectWithoutProperties(_ref, ['componentName', 'propsResolution', 'src']);

  /**
   * Runs component source code through react-docgen. Passing second argument to parse
   * function to account for mutiple export.
   * @type {Object}
   */
  var componentMetaData = void 0;

  /**
   * Alias for props object from componentMetaData
   * @type {Object}
   */
  var componentProps = void 0;

  // Resolve using react-docgen's default resolver
  if (propsResolution === 'default') {
    componentMetaData = (0, _reactDocgen.parse)(src);
    componentProps = componentMetaData.props;
  }

  // Resolve using react-docgen's findAllComponentDefinitions resolver
  if (propsResolution === 'findAllComponentDefinitions') {
    componentMetaData = (0, _reactDocgen.parse)(src, _reactDocgen.resolver.findAllComponentDefinitions);
    componentProps = componentMetaData[0].props;
  }

  var tableRowClass = cx('prop-table-row');
  var tableClassNames = cx(['props-table', customProps.className]);

  return _react2.default.createElement(
    'div',
    { dir: 'ltr', className: 'markdown-body' },
    _react2.default.createElement(
      'h2',
      null,
      componentName,
      ' ',
      'Props'
    ),
    _react2.default.createElement(
      'table',
      _extends({}, customProps, { className: tableClassNames }),
      _react2.default.createElement(
        'thead',
        null,
        _react2.default.createElement(
          'tr',
          null,
          _react2.default.createElement(
            'th',
            { className: cx('prop-table-name') },
            'Prop Name'
          ),
          _react2.default.createElement(
            'th',
            { className: cx('prop-table-type') },
            'Type'
          ),
          _react2.default.createElement(
            'th',
            { className: cx('prop-table-required') },
            'Is Required'
          ),
          _react2.default.createElement(
            'th',
            { className: cx('prop-table-default') },
            'Default Value'
          ),
          _react2.default.createElement(
            'th',
            { className: cx('prop-table-description') },
            'Description'
          )
        )
      ),
      _react2.default.createElement(
        'tbody',
        null,
        Object.keys(componentProps).map(function (key) {
          var prop = componentProps[key];
          var type = determineType(prop.type);

          return _react2.default.createElement(
            'tr',
            { className: tableRowClass, key: key, style: { fontSize: '90%' } },
            _react2.default.createElement(
              'td',
              { style: { fontWeight: 'bold' } },
              key
            ),
            _react2.default.createElement(
              'td',
              null,
              prop.type ? type : ''
            ),
            prop.required ? _react2.default.createElement(
              'td',
              { style: { color: '#d53700' } },
              'required'
            ) : _react2.default.createElement(
              'td',
              { style: { color: '#444' } },
              'optional'
            ),
            prop.defaultValue ? _react2.default.createElement(
              'td',
              { style: { fontWeight: 'bold' } },
              prop.defaultValue.value
            ) : _react2.default.createElement(
              'td',
              { style: { color: '#444' } },
              'none'
            ),
            _react2.default.createElement(
              'td',
              null,
              _react2.default.createElement(_terraMarkdown2.default, { src: prop.description })
            )
          );
        })
      )
    )
  );
};

PropsTable.propTypes = propTypes;
PropsTable.defaultProps = defaultProps;

exports.default = PropsTable;