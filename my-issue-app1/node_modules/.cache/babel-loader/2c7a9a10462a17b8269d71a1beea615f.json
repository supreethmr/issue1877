{"ast":null,"code":"'use strict';\n\nvar _intlLoaders = require('./intlLoaders');\n\nvar _intlLoaders2 = _interopRequireDefault(_intlLoaders);\n\nvar _translationsLoaders = require('./translationsLoaders');\n\nvar _translationsLoaders2 = _interopRequireDefault(_translationsLoaders);\n\nvar _i18nSupportedLocales = require('./i18nSupportedLocales');\n\nvar _i18nSupportedLocales2 = _interopRequireDefault(_i18nSupportedLocales);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar hasIntl = typeof Intl !== 'undefined';\n/* eslint-disable */\n\nvar permitParams = function permitParams(locale, callback) {\n  if (process.env.NODE_ENV !== 'production' && _i18nSupportedLocales2.default.indexOf(locale) < 0) {\n    console.warn(locale + ' is not a supported locale, supported locales include: ' + _i18nSupportedLocales2.default.join(', ') + '.');\n  }\n\n  if (typeof callback !== 'function') {\n    throw new Error('Second argument must be function');\n  }\n};\n\nmodule.exports = function (locale, callback, scope) {\n  permitParams(locale, callback);\n\n  if (!hasIntl) {\n    require.ensure([], function (require) {\n      require('intl');\n\n      (0, _intlLoaders2.default)(locale);\n      (0, _translationsLoaders2.default)(locale, callback, scope);\n    }, 'intl-polyfill');\n  } else {\n    (0, _translationsLoaders2.default)(locale, callback, scope);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}