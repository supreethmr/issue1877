{"ast":null,"code":"'use strict';\n\nvar _translationsLoaders = require('translationsLoaders');\n\nvar _translationsLoaders2 = _interopRequireDefault(_translationsLoaders);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar loadFallbackLocale = function loadFallbackLocale(localeContext, callback, scope) {\n  try {\n    _translationsLoaders2.default['en'](callback, scope);\n\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn('Translations were not supplied for the ' + localeContext + '. Using en as the fallback locale.');\n    }\n  } catch (e) {\n    throw new Error('Translations were not supplied for the ' + localeContext + ', or the en fallback locale.');\n  }\n};\n/* eslint-disable */\n\n\nvar loadTranslations = function loadTranslations(locale, callback, scope) {\n  var fallbackLocale = locale.split('-').length > 1 ? locale.split('-')[0] : false;\n\n  try {\n    _translationsLoaders2.default[locale](callback, scope);\n  } catch (e) {\n    if (fallbackLocale) {\n      try {\n        _translationsLoaders2.default[fallbackLocale](callback, scope);\n\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn('Translations were not supplied for the ' + locale + ' locale. Using ' + fallbackLocale + ' as the fallback locale.');\n        }\n      } catch (e) {\n        var localeContext = locale + ' or ' + fallbackLocale + ' locales';\n        loadFallbackLocale(localeContext, callback, scope);\n      }\n    } else {\n      var _localeContext = locale + ' locale';\n\n      loadFallbackLocale(_localeContext, callback, scope);\n    }\n  }\n};\n\nmodule.exports = loadTranslations;","map":null,"metadata":{},"sourceType":"script"}