{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HyperlinkVariants = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _bind = require('classnames/bind');\n\nvar _bind2 = _interopRequireDefault(_bind);\n\nrequire('terra-base/lib/baseStyles');\n\nvar _HyperlinkModule = require('./Hyperlink.module.scss');\n\nvar _HyperlinkModule2 = _interopRequireDefault(_HyperlinkModule);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar cx = _bind2.default.bind(_HyperlinkModule2.default);\n\nvar KEYCODES = {\n  ENTER: 13,\n  TAB: 9\n};\nvar variants = {\n  DEFAULT: 'default',\n  EXTERNAL: 'external',\n  IMAGE: 'image',\n  VIDEO: 'video',\n  AUDIO: 'audio',\n  DOCUMENT: 'document'\n};\nvar propTypes = {\n  /**\n   * The content to display inside link.\n   */\n  children: _propTypes2.default.node,\n\n  /**\n   * Sets the href of the link.\n   */\n  href: _propTypes2.default.string,\n\n  /**\n   * Whether or not the link should be disabled.\n   */\n  isDisabled: _propTypes2.default.bool,\n\n  /**\n   * Whether or not the link should display an underline by default. Will still display an underline on hover and focus.\n   */\n  isUnderlineHidden: _propTypes2.default.bool,\n\n  /**\n   * Callback function triggered when clicked.\n   */\n  onClick: _propTypes2.default.func,\n\n  /**\n   * Callback function triggered when hyperlink loses focus.\n   */\n  onBlur: _propTypes2.default.func,\n\n  /**\n   * Callback function triggered when hyperlink gains focus.\n   */\n  onFocus: _propTypes2.default.func,\n\n  /**\n   * Callback function triggered when key is pressed.\n   */\n  onKeyDown: _propTypes2.default.func,\n\n  /**\n   * Callback function triggered when key is released.\n   */\n  onKeyUp: _propTypes2.default.func,\n\n  /**\n   * Sets the hyperlink variant. One of `default`, `external`, `image`, `video`, `audio`, `document`.\n   */\n  variant: _propTypes2.default.oneOf(['default', 'external', 'image', 'video', 'audio', 'document'])\n};\nvar defaultProps = {\n  isDisabled: false,\n  variant: variants.DEFAULT\n};\n\nvar Hyperlink = function (_React$Component) {\n  _inherits(Hyperlink, _React$Component);\n\n  function Hyperlink(props) {\n    _classCallCheck(this, Hyperlink);\n\n    var _this = _possibleConstructorReturn(this, (Hyperlink.__proto__ || Object.getPrototypeOf(Hyperlink)).call(this, props));\n\n    _this.state = {\n      active: false,\n      focused: false\n    };\n    _this.handleKeyDown = _this.handleKeyDown.bind(_this);\n    _this.handleKeyUp = _this.handleKeyUp.bind(_this);\n    _this.handleOnBlur = _this.handleOnBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(Hyperlink, [{\n    key: 'handleOnBlur',\n    value: function handleOnBlur(event) {\n      this.setState({\n        focused: false\n      });\n\n      if (this.props.onBlur) {\n        this.props.onBlur(event);\n      }\n    }\n  }, {\n    key: 'handleKeyDown',\n    value: function handleKeyDown(event) {\n      // Add focus styles for keyboard navigation\n      if (event.nativeEvent.keyCode === KEYCODES.ENTER) {\n        this.setState({\n          focused: true\n        });\n      }\n\n      if (this.props.onKeyDown) {\n        this.props.onKeyDown(event);\n      }\n    }\n  }, {\n    key: 'handleKeyUp',\n    value: function handleKeyUp(event) {\n      // Apply focus styles for keyboard navigation\n      if (event.nativeEvent.keyCode === KEYCODES.TAB) {\n        this.setState({\n          focused: true\n        });\n      }\n\n      if (this.props.onKeyUp) {\n        this.props.onKeyUp(event);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          isDisabled = _props.isDisabled,\n          isUnderlineHidden = _props.isUnderlineHidden,\n          variant = _props.variant,\n          href = _props.href,\n          onClick = _props.onClick,\n          onBlur = _props.onBlur,\n          onFocus = _props.onFocus,\n          onKeyDown = _props.onKeyDown,\n          onKeyUp = _props.onKeyUp,\n          customProps = _objectWithoutProperties(_props, ['children', 'isDisabled', 'isUnderlineHidden', 'variant', 'href', 'onClick', 'onBlur', 'onFocus', 'onKeyDown', 'onKeyUp']);\n\n      var hyperlinkClasses = cx(['hyperlink', variant, {\n        'is-disabled': isDisabled\n      }, {\n        'is-underline-hidden': isUnderlineHidden\n      }, {\n        'is-active': this.state.active\n      }, {\n        'is-focused': this.state.focused\n      }, customProps.className]);\n      var ComponentType = isDisabled ? 'span' : 'a';\n      var target = customProps.target; // Defaults to undefined if not set\n\n      var rel = customProps.rel; // Defaults to undefined if not set\n      // If variant is set to external, we'll add target=\"_blank\" and rel=\"noopener noreferrer\"\n      // unless user passes their own target or rel attribute\n\n      if (!customProps.target && variant === 'external') {\n        target = '_blank';\n      }\n\n      if (!customProps.rel && variant === 'external') {\n        rel = 'noopener noreferrer';\n      }\n\n      return _react2.default.createElement(ComponentType, _extends({}, customProps, {\n        className: hyperlinkClasses,\n        onKeyDown: this.handleKeyDown,\n        onKeyUp: this.handleKeyUp,\n        onBlur: this.handleOnBlur,\n        onClick: onClick,\n        onFocus: onFocus,\n        href: isDisabled ? null : href,\n        target: target,\n        rel: rel\n      }), children);\n    }\n  }]);\n\n  return Hyperlink;\n}(_react2.default.Component);\n\nHyperlink.propTypes = propTypes;\nHyperlink.defaultProps = defaultProps;\nexports.HyperlinkVariants = variants;\nexports.default = Hyperlink;","map":null,"metadata":{},"sourceType":"script"}